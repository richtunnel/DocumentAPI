"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _events = require("events");

var _events2 = _interopRequireDefault(_events);

var _createOutgoingMessage = require("./createOutgoingMessage");

var _createOutgoingMessage2 = _interopRequireDefault(_createOutgoingMessage);

var _createIncomingMessage = require("./createIncomingMessage");

var _createIncomingMessage2 = _interopRequireDefault(_createIncomingMessage);

var _assertContext = require("./assertContext");

var _assertContext2 = _interopRequireDefault(_assertContext);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Express adapter allowing to handle Azure Function requests by wrapping in request events.
 *
 * @class
 * @fires request
 */
class ExpressAdapter extends _events2.default {

  /**
   * @param {Object=} requestListener Request listener (typically an express/connect instance)
   */
  constructor(requestListener) {
    super();

    if (requestListener !== undefined) {
      this.addRequestListener(requestListener);
    }
  }

  /**
   * Adds a request listener (typically an express/connect instance).
   *
   * @param {Object} requestListener Request listener (typically an express/connect instance)
   */
  addRequestListener(requestListener) {
    this.addListener("request", requestListener);
  }

  /**
   * Handles Azure Function requests.
   *
   * @param {Object} context Azure context object for a single request
   */
  handleAzureFunctionRequest(context) {
    (0, _assertContext2.default)(context);

    // 1. Context basic initialization
    context.res = context.res || {};

    // 2. Wrapping
    const req = (0, _createIncomingMessage2.default)(context);
    const res = (0, _createOutgoingMessage2.default)(context);

    // 3. Synchronously calls each of the listeners registered for the event
    this.emit("request", req, res);
  }

  /**
   * Create function ready to be exposed to Azure Function for request handling.
   *
   * @returns {function(context: Object)} Azure Function handle
   */
  createAzureFunctionHandler() {
    return this.handleAzureFunctionRequest.bind(this);
  }

}
exports.default = ExpressAdapter;
module.exports = exports["default"];