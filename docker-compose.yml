services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    platform: linux/amd64
    ports:
      - "3000:3000"  # Express API
      - "7071:7071"  # Azure Functions (for health check compatibility)
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_CONNECTION_STRING=mssql://sa:YourStrongPassword@mssql:1433/milestonepathway?encrypt=true&trustServerCertificate=true
      - REDIS_CONNECTION_STRING=your-redis-connection-string
      - AzureWebJobsStorage=UseDevelopmentStorage=true
      - SERVICE_BUS_CONNECTION_STRING=Endpoint=sb://localhost;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=yourkey
      - WEBHOOK_SECRET=your-webhook-secret-key
      - DOCUMENTS_CONTAINER_NAME=demographics-documents
      - FUNCTIONS_WORKER_RUNTIME=node
      - DB_SERVER=your-sql-server.database.windows.net
      - DB_DATABASE=your-database-name
      - DB_USER=your-username
      - DB_PASSWORD=your-password
      - DB_PORT=1433
      - QUEUE_CONNECTION_STRING=your-storage-account-connection-string
      - API_KEY_ENCRYPTION_KEY=your-32-char-encryption-key
      - ENVIRONMENT=development
    volumes:
      - .:/app
    depends_on:
      - mssql
      - redis
      - azurite
    command: npm run dev  # Override to run Express via nodemon

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    platform: linux/amd64
    environment:
      - NODE_ENV=development
      - DATABASE_CONNECTION_STRING=mssql://sa:Green$un@83@mssql:1433/milestonepartners?encrypt=true&trustServerCertificate=true
      - REDIS_CONNECTION_STRING=your-redis-connection-string
      - AzureWebJobsStorage=UseDevelopmentStorage=true
      - SERVICE_BUS_CONNECTION_STRING=Endpoint=sb://localhost;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=yourkey
      - FUNCTIONS_WORKER_RUNTIME=node
      - DB_SERVER=your-sql-server.database.windows.net
      - DB_DATABASE=your-database-name
      - DB_USER=your-username
      - DB_PASSWORD=your-password
      - DB_PORT=1433
      - QUEUE_CONNECTION_STRING=your-storage-account-connection-string
      - WEBHOOK_SECRET=your-webhook-secret-key
      - API_KEY_ENCRYPTION_KEY=your-32-char-encryption-key
      - ENVIRONMENT=development
    depends_on:
      - mssql
      - redis
      - azurite
    command: npm run worker  # Run Azure Function worker

  webhook-processor:
    build:
      context: .
      dockerfile: Dockerfile
    platform: linux/amd64
    environment:
      - NODE_ENV=development
      - DATABASE_CONNECTION_STRING=mssql://sa:Green$un@83@mssql:1433/milestone_partners?encrypt=true&trustServerCertificate=true
      - REDIS_CONNECTION_STRING=your-redis-connection-string
      - AzureWebJobsStorage=UseDevelopmentStorage=true
      - SERVICE_BUS_CONNECTION_STRING=Endpoint=sb://localhost;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=yourkey
      - FUNCTIONS_WORKER_RUNTIME=node
      - DB_SERVER=your-sql-server.database.windows.net
      - DB_DATABASE=your-database-name
      - DB_USER=your-username
      - DB_PASSWORD=your-password
      - DB_PORT=1433
      - QUEUE_CONNECTION_STRING=your-storage-account-connection-string
      - WEBHOOK_SECRET=your-webhook-secret-key
      - API_KEY_ENCRYPTION_KEY=your-32-char-encryption-key
      - ENVIRONMENT=development
    depends_on:
      - mssql
      - redis
      - azurite
    command: npm run webhook-processor  # Run Azure Function webhook processor

  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    platform: linux/amd64
    environment:
      - SA_PASSWORD=Green$un@83
      - ACCEPT_EULA=Y
      - MSSQL_PID=Developer
      - MSSQL_USER=sa
    ports:
      - "1433:1433"
    volumes:
      - mssql-data:/var/opt/mssql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    # healthcheck:
    # test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${SA_PASSWORD} -Q "SELECT 1" || exit 1
    # interval: 10s
    # timeout: 5s
    # retries: 5
    # start_period: 30s
  redis:
    image: redis:7.0
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    ports:
      - "10000:10000"  # Blob service
      - "10001:10001"  # Queue service
      - "10002:10002"  # Table service
    volumes:
      - azurite-data:/data

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - api

volumes:
  mssql-data:
  redis-data:
  azurite-data: